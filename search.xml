<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[FSM有限状态机]]></title>
    <url>%2F2019%2F08%2F01%2FFSM%E6%9C%89%E9%99%90%E7%8A%B6%E6%80%81%E6%9C%BA%2F</url>
    <content type="text"><![CDATA[简介了解FSM之前需要了解一下状态机 FSM是状态机的一种实现方式，它把复杂的控制逻辑分解成有限个稳定状态，在每个状态上判断事件，变连续处理为离散数字。 原理发生事件(event)后，根据当前状态(cur_state) ，决定执行的动作(action)，并设置下一个状态号(nxt_state)。 特点 有限 状态离散性 因为有限状态机是个封闭系统，具有结束状态，所以它是有限的。 状态离散性：离散的某一时刻只能处于某种状态之下，且需要满足某种条件才能从一种状态转移到另一种状态。 设计状态机的设计状态之间的关系是一个麻烦的事情，所以在设计的过程中需要借助状态图或者状态表来设计。 个人喜欢现态/次态表，其中填写事件和动作，然后将条件梳理。 代码FSM实现事件检测可以通过“轮询”或者“事件驱动”的方式。下面代码是采用轮询的方式。 这是一本书中提到的通用FSM状态机源码 其中包括了1.Description 2.Component 3.C#-FSMSystem.cs 4.Example。 部分代码展示。 1234567891011121314151617181920212223242526272829303132333435363738394041public enum Transition&#123; NullTransition = 0,&#125; public enum StateID&#123; NullStateID = 0,&#125; public abstract class FSMState&#123; protected Dictionary&lt;Transition, StateID&gt; map = new Dictionary&lt;Transition, StateID&gt;(); protected StateID stateID; public StateID ID &#123; get &#123; return stateID; &#125; &#125; public void AddTransition(Transition trans, StateID id)&#123;&#125; public void DeleteTransition(Transition trans)&#123;&#125; public StateID GetOutputState(Transition trans)&#123;&#125; public virtual void DoBeforeEntering() &#123; &#125; public virtual void DoBeforeLeaving() &#123; &#125; public abstract void Reason(GameObject player, GameObject npc); public abstract void Act(GameObject player, GameObject npc);&#125; public class FSMSystem&#123; private List&lt;FSMState&gt; states; private StateID currentStateID; public StateID CurrentStateID &#123; get &#123; return currentStateID; &#125; &#125; private FSMState currentState; public FSMState CurrentState &#123; get &#123; return currentState; &#125; &#125; public FSMSystem() &#123; states = new List&lt;FSMState&gt;(); &#125; public void AddState(FSMState s)&#123;&#125; public void DeleteState(StateID id)&#123;&#125; public void PerformTransition(Transition trans)&#123;&#125;&#125; 优缺点 优点 缺点 优点：相对简单的状态机来使用swich那样不方便扩展，将事件放置具体状态中相对来说好维护 缺点：1.随着状态的增加我们会发现有很多相似的状态 2.随着状态的增多，维护链接成本还是很高的 3.很难做到状态并行 下图是我画的状态图 它的表现效果是双方士兵们出阵然后开始群殴，直至一方士兵全部死亡。当时并没有采用现态/次态表，很遗憾很乱，而且事件条件很乱很有可以会出错。如果这时候策划来说，我感觉一方敌人全部死亡之后，呆呆的站在那里很难受，让他们庆祝一下吧。这时候我很方便的添加一个庆祝状态，庆祝之后站立。 它状态少的时候还好，状态多的时候就很尴尬，维护起来的成本很高。而且无法达到并行的目的。而且出阵和冲锋其实有点相似的。状态机的确满足了我的项目需求，但是不可否认的是FSM本身存在的问题，不过相比BT(行为树)自顶向下的轮询方式，它起码可以采用事件驱动的方式来实现状态切换，而且在针对简单的项目需求还是蛮有效的，所以在游戏开发中需要根据具体情况去合理的在状态机和BT之间权衡。然后采用适合自己的项目的方式实现，如下面的扩展。 扩展 分层状态机 并行状态机 BT行为树 神经网络 …]]></content>
      <categories>
        <category>AI</category>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>AI</tag>
        <tag>FSM</tag>
        <tag>状态机</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[windows-屏幕阅读器]]></title>
    <url>%2F2019%2F07%2F31%2Fwindows-%E5%B1%8F%E5%B9%95%E9%98%85%E8%AF%BB%E5%99%A8%2F</url>
    <content type="text"><![CDATA[莫名开启的讲述人功能 快捷键开启 ctr + window + Enter]]></content>
      <categories>
        <category>windows</category>
      </categories>
      <tags>
        <tag>杂记</tag>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[状态机]]></title>
    <url>%2F2019%2F07%2F27%2F%E7%8A%B6%E6%80%81%E6%9C%BA%2F</url>
    <content type="text"><![CDATA[简介状态机：描述一个实体基于事件反应的动态行为，显示了该实体如何根据当前所处的状态对不同的事件做出反应的模型。 用来表示有限多个状态以及在这些状态（State）之间转移（Transition）和动作（Action）的数学模型。 简单的说它可以将单位的所有行为去划分状态，状态与状态之间通过事件的触发形成。 状态机可归纳为4个要素，即现态，条件，动作，次态。 现态：是指当前所处的状态。 条件：又称为“事件”。当一个条件被满足，将会触发一个动作，或者执行一次状态的迁移。 动作：条件满足后执行的动作。动作执行完毕后，可以迁移到新的状态，也可以仍旧保持原状态。动作不是必需的 次态：条件满足后要迁往的新状态。 事件：1.检测转换条件 2.进行状态切换 设计状态机 可以用状态移动图表示 可以用表格来表示，如：事件/状态表，现态/次态表… AI设计中个人喜欢现态/次态表 状态机分类 Moore状态机：输出只和状态有关而与输入无关 Mealy状态机：输出不仅和状态有关而且和输入有关系 实现 竖向：swich，if..else 横向：FSM 附录：竖向写1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465cur_state = nxt_state;switch(cur_state)&#123; //在当前状态中判断事件case s0: //在s0状态if(e0_event)&#123; //如果发生e0事件，那么就执行a0动作，并保持状态不变；执行a0动作;//nxt_state = s0; //因为状态号是自身，所以可以删除此句，以提高运行速度。&#125;else if(e1_event)&#123; //如果发生e1事件，那么就执行a1动作，并将状态转移到s1态；执行a1动作;nxt_state = s1;&#125;else if(e2_event)&#123; //如果发生e2事件，那么就执行a2动作，并将状态转移到s2态；执行a2动作;nxt_state = s2;&#125;break;case s1: //在s1状态if(e2_event)&#123; //如果发生e2事件，那么就执行a2动作，并将状态转移到s2态；执行a2动作;nxt_state = s2;&#125;break;case s2: //在s2状态if(e0_event)&#123; //如果发生e0事件，那么就执行a0动作，并将状态转移到s0态；执行a0动作;nxt_state = s0;&#125;]]></content>
      <categories>
        <category>AI</category>
      </categories>
      <tags>
        <tag>FSM</tag>
        <tag>状态机</tag>
        <tag>基础</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[时间复杂度，空间复杂度和稳定性]]></title>
    <url>%2F2019%2F07%2F26%2F%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%EF%BC%8C%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%92%8C%E7%A8%B3%E5%AE%9A%E6%80%A7%2F</url>
    <content type="text"><![CDATA[时间复杂度，空间复杂度和稳定性 时间复杂度指的是算法执行语句的次数（取最多次数的那个语句来表示）a^x^ =N（a&gt;0，且a≠1） ==&gt; x=logaN注： Hash的查找的时间复杂度是1，原因“key-value键值对”，离散的 下面是3个例子关于while简单的理解一下时间复杂度 123456789101112131415161718192021//第一个算法执行次数是20，常量所以是O(1)int x = 1;while (x&lt;20)&#123; x++;&#125;//第二个执行次数是n决定，O(n)int x = 1;while (x&lt;n)&#123; x++;&#125;// 执行次数由 c 和 n共同决定，c = 1 时，O(1)，c != 1时，O(n)int x = 1;c = c or 1;while (x&lt;n &amp;&amp; c != 1)&#123; x++;&#125; 再来看一个简单插入排序 1234567891011121314151617181920212223242526272829303132333435#include &lt;stdio.h&gt;// 分类 ------------- 内部比较排序// 数据结构 ---------- 数组// 最差时间复杂度 ---- 最坏情况为输入序列是降序排列的,此时时间复杂度O(n^2)// 最优时间复杂度 ---- 最好情况为输入序列是升序排列的,此时时间复杂度O(n)// 平均时间复杂度 ---- O(n^2)// 所需辅助空间 ------ O(1)// 稳定性 ------------ 稳定int main()&#123; int A[] = &#123; 6, 5, 3, 1, 8, 7, 2, 4 &#125;;// 从小到大插入排序 int n = sizeof(A) / sizeof(int); int i, j, get; for (i = 1; i &lt; n; i++) // 类似抓扑克牌排序 &#123; get = A[i]; // 右手抓到一张扑克牌 j = i - 1; // 拿在左手上的牌总是排序好的 while (j &gt;= 0 &amp;&amp; A[j] &gt; get) // 将抓到的牌与手牌从右向左进行比较 &#123; A[j + 1] = A[j]; // 如果该手牌比抓到的牌大,就将其右移 j--; &#125; A[j + 1] = get;// 直到该手牌比抓到的牌小(或二者相等),将抓到的牌插入到该手牌右边(相等元素的相对次序未变,所以插入排序是稳定的) &#125; printf(&quot;插入排序结果：&quot;); for (i = 0; i &lt; n; i++) &#123; printf(&quot;%d &quot;, A[i]); &#125; printf(&quot;\n&quot;); return 0;&#125; 改进一下，第二层采用二分查找法 12345678910111213141516171819202122232425262728293031323334353637383940414243#include &lt;stdio.h&gt;// 分类 -------------- 内部比较排序// 数据结构 ---------- 数组// 最差时间复杂度 ---- O(n^2)// 最优时间复杂度 ---- O(nlogn)// 平均时间复杂度 ---- O(n^2)// 所需辅助空间 ------ O(1)// 稳定性 ------------ 稳定int main()&#123; int A[] = &#123; 5, 2, 9, 4, 7, 6, 1, 3, 8 &#125;;// 从小到大二分插入排序 int n = sizeof(A) / sizeof(int); int i, j, get, left, right, middle; for (i = 1; i &lt; n; i++) // 类似抓扑克牌排序 &#123; get = A[i]; // 右手抓到一张扑克牌 left = 0; // 拿在左手上的牌总是排序好的,所以可以用二分法 right = i - 1; // 手牌左右边界进行初始化 while (left &lt;= right) // 采用二分法定位新牌的位置 &#123; middle = (left + right) / 2; if (A[middle] &gt; get) right = middle - 1; else left = middle + 1; &#125; for (j = i - 1; j &gt;= left; j--) // 将欲插入新牌位置右边的牌整体向右移动一个单位 &#123; A[j + 1] = A[j]; &#125; A[left] = get; // 将抓到的牌插入手牌 &#125; printf(&quot;二分插入排序结果：&quot;); for (i = 0; i &lt; n; i++) &#123; printf(&quot;%d &quot;, A[i]); &#125; printf(&quot;\n&quot;); return 0;&#125; 再改进一下，成为希尔排序 12345678910111213141516171819202122232425262728293031323334353637383940414243#include &lt;stdio.h&gt; // 分类 -------------- 内部比较排序// 数据结构 ---------- 数组// 最差时间复杂度 ---- 根据步长序列的不同而不同。已知最好的为O(n(logn)^2)// 最优时间复杂度 ---- O(n)// 平均时间复杂度 ---- 根据步长序列的不同而不同。// 所需辅助空间 ------ O(1)// 稳定性 ------------ 不稳定int main()&#123; int A[] = &#123; 5, 2, 9, 4, 7, 6, 1, 3, 8 &#125;;// 从小到大希尔排序 int n = sizeof(A) / sizeof(int); int i, j, get; int h = 0; while (h &lt;= n) // 生成初始增量 &#123; h = 3*h + 1; &#125; while (h &gt;= 1) &#123; for (i = h; i &lt; n; i++) &#123; j = i - h; get = A[i]; while ((j &gt;= 0) &amp;&amp; (A[j] &gt; get)) &#123; A[j + h] = A[j]; j = j - h; &#125; A[j + h] = get; &#125; h = (h - 1) / 3; // 递减增量 &#125; printf(&quot;希尔排序结果：&quot;); for (i = 0; i &lt; n; i++) &#123; printf(&quot;%d &quot;, A[i]); &#125; printf(&quot;\n&quot;); return 0;&#125; 空间复杂度指对一个算法在运行过程中临时占用存储空间，看你开辟的临时空间就好了。 稳定性排序稳定性指的是针对相同数值，在排序前后是否有发生变化的可能。一般举返例来证明 这只是一个例子来说明稳定性，大家普遍说冒泡是稳定的，条件换成“&gt;=”导致算法不稳定，建议不要 下面是个简单冒泡排序来排序｛1，1，1，1，1，1，2， 2，1｝ 12345678910for (int j = 0; j &lt; n - 1; j++) &#123; for (int i = 0; i &lt; n - 1 - j; i++) &#123; if (A[i] &gt; A[i + 1]) // 如果条件改成A[i] &gt;= A[i + 1],则变为不稳定的排序算法 &#123; exchange(A, i, i + 1); &#125; &#125; &#125; 数值稳定性讨论的是计算机编程中，由于四舍五入等导致的结果偏差。 尽量减少运算次数 加法运算时，避免大数加小数 避免两个相近的数相减 避免小数做除法或者大数做乘法 附录常见排序总结编程排序算法]]></content>
      <categories>
        <category>数据结构和算法</category>
      </categories>
      <tags>
        <tag>基础</tag>
        <tag>数据结构</tag>
        <tag>算法</tag>
      </tags>
  </entry>
</search>
